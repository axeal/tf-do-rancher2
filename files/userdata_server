#!/bin/bash -x
export curlimage=appropriate/curl
export jqimage=stedolan/jq

if [ `command -v curl` ]; then
  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
elif [ `command -v wget` ]; then
  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh
fi

for image in $curlimage $jqimage "rancher/rancher:${rancher_version}"; do
  until docker inspect $image > /dev/null 2>&1; do
    docker pull $image
    sleep 2
  done
done

docker run -d -e AUDIT_LEVEL=${audit_level} --privileged --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:${rancher_version} ${rancher_args}

while true; do
  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping && break
  sleep 5
done

# Login
while true; do

    LOGINRESPONSE=$(docker run \
        --rm \
        --net=host \
        $curlimage \
        -s "https://127.0.0.1/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"admin"}' --insecure)
    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)

    if [ "$LOGINTOKEN" != "null" ]; then
        break
    else
        sleep 5
    fi
done


# Change password
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"admin","newPassword":"${admin_password}"}' --insecure

# Create API key
APIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure)

# Extract and store token
APITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`

# Configure server-url
RANCHER_SERVER="https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)"
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X PUT --data-binary '{"name":"server-url","value":"'$RANCHER_SERVER'"}' --insecure

# Check for available k8s versions if not specifically set
if [ -z "${k8s_version}" ]; then
    while true; do
        K8SVERSIONRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/k8s-version' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
        K8SVERSION=$(echo $K8SVERSIONRESPONSE | docker run --rm -i $jqimage -r .value)
        echo "K8SVERSION: "$K8SVERSION""

        if [ "$K8SVERSION" != "" ]; then
            break
        else
            sleep 5
        fi
    done
else
    K8SVERSION="${k8s_version}"
fi

if [ "${windows_prefered_cluster}" == "true" ]; then
    NETWORK_CONFIG='{"type":"networkConfig","plugin":"flannel","options":{"flannel_backend_type":"vxlan","flannel_backend_port":"4789","flannel_backend_vni":"4096"}}'
else
    NETWORK_CONFIG='{"type":"networkConfig","plugin":"canal"}'
fi

# Create cluster
CLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"${docker_root}","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"kubernetesVersion":"${k8s_version}","addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":'$NETWORK_CONFIG',"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"creation":"12h","extraArgs":{"heartbeat-interval":500,"election-timeout":5000},"retention":"72h","snapshot":false,"type":"etcdService","backupConfig":{"enabled":true,"intervalHours":12,"retention":6,"type":"backupConfig"}}}},"localClusterAuthEndpoint":{"enabled":true,"type":"localClusterAuthEndpoint"},"name":"${cluster_name}","windowsPreferedCluster":${windows_prefered_cluster}}' --insecure)
# Extract clusterid to use for generating the docker run command
CLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`

# Generate registrationtoken
docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure

# CLI (optional)
API_CLI_URL_LINUX=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/cli-url-linux' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
CLI_URL_LINUX=`echo $API_CLI_URL_LINUX | docker run --rm -i $jqimage -r .value`

# Extract binary to /usr/local/bin
docker run -v /usr/local/bin:/usr/local/bin $curlimage sh -c "curl -sLk $CLI_URL_LINUX | tar xz --strip-components=2 -C /usr/local/bin"

# Get cacerts to validate connection
API_CACERTS=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/cacerts' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure)
CACERTS=$(echo $API_CACERTS | docker run --rm -i $jqimage -r .value)
echo "$CACERTS" > /root/cacerts

# Accept anything for project
echo 1 | rancher login --cacert /root/cacerts --token $APITOKEN https://127.0.0.1/v3
ln -s /.rancher ~/.rancher
